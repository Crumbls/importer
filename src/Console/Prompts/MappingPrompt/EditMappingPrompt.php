<?php

namespace Crumbls\Importer\Console\Prompts\MappingPrompt;

use Crumbls\Importer\Console\Prompts\AbstractPrompt;
use Crumbls\Importer\Console\Prompts\MappingPrompt\Concerns\ValidatesMapping;
use Crumbls\Importer\Models\ImportModelMap;
use function Laravel\Prompts\select;
use function Laravel\Prompts\text;
use function Laravel\Prompts\confirm;
use function Laravel\Prompts\info;

class EditMappingPrompt extends AbstractPrompt
{
    use ValidatesMapping;
    
    protected ImportModelMap $map;

    public function setMap(ImportModelMap $map): void
    {
        $this->map = $map;
    }

    public function render(): mixed
    {
        $this->handle();
        return null;
    }

    public function handle(): void
    {
        $this->command->info("=== Editing Mapping: {$this->map->source_table} ===");
        
        while (true) {
            $this->displayCurrentMapping();
            $this->displayCurrentValidation();
            
            $action = $this->selectEditAction();
            
            if ($action === 'back') {
                break;
            }
            
            $this->handleEditAction($action);
        }
    }

    protected function displayCurrentMapping(): void
    {
        $this->command->info("Source Table: {$this->map->source_table}");
        $this->command->info("Destination: " . ($this->map->destination_table ?: '<not set>'));
        $this->command->info("Model: " . ($this->map->target_model ?: '<will be generated>'));
        $this->command->info("Status: " . $this->getDetailedStatus());
        $this->command->newLine();
    }

    protected function displayCurrentValidation(): void
    {
        $issues = $this->validateMapping($this->map);
        
        if (!empty($issues)) {
            $this->command->getOutput()->writeln('<fg=yellow>⚠️  Validation Issues:</>');
            $this->displayValidationResults($issues);
        } else {
            $this->command->info('✅ No validation issues found');
        }
        
        $this->command->newLine();
    }

    protected function getDetailedStatus(): string
    {
        if ($this->isLockedToExisting($this->map)) {
            return 'Locked to existing model - limited editing available';
        }
        
        return 'Fully configurable';
    }

    protected function selectEditAction(): string
    {
        $options = [
            'destination' => 'Set destination table/model',
            'columns' => 'Configure column mappings',
            'sample' => 'Browse sample data',
            'validate' => 'Run full validation',
        ];
        
        if (!$this->isLockedToExisting($this->map)) {
            $options['relationships'] = 'Configure relationships';
            $options['transformations'] = 'Configure transformations';
        }
        
        $options['back'] = 'Back to main menu';

        return select('What would you like to edit?', $options);
    }

    protected function handleEditAction(string $action): void
    {
        switch ($action) {
            case 'destination':
                $this->editDestination();
                break;
                
            case 'columns':
                $this->editColumns();
                break;
                
            case 'sample':
                $this->browseSampleData();
                break;
                
            case 'validate':
                $this->runValidation();
                break;
                
            case 'relationships':
                $this->editRelationships();
                break;
                
            case 'transformations':
                $this->editTransformations();
                break;
        }
    }

    protected function editDestination(): void
    {
        $choice = select('How would you like to set the destination?', [
            'new' => 'Create new table',
            'auto' => 'Auto-generate from source name',
            'existing' => 'Map to existing model/table',
        ]);

        switch ($choice) {
            case 'new':
                $this->createNewDestination();
                break;
                
            case 'auto':
                $this->autoGenerateDestination();
                break;
                
            case 'existing':
                $this->mapToExisting();
                break;
        }
        
        // Validate after changes
        $this->validateAndConfirm();
    }

    protected function createNewDestination(): void
    {
        $tableName = text('Enter new table name:', $this->map->destination_table);
        $modelName = text('Enter model name (optional):', $this->map->target_model);

        $this->map->update([
            'destination_table' => $tableName,
            'target_model' => $modelName
        ]);

        $this->command->info('Destination updated successfully.');
    }

    protected function autoGenerateDestination(): void
    {
        $tableName = \Illuminate\Support\Str::plural(\Illuminate\Support\Str::snake($this->map->source_table));
        $modelName = \Illuminate\Support\Str::studly(\Illuminate\Support\Str::singular($tableName));

        $this->map->update([
            'destination_table' => $tableName,
            'target_model' => $modelName
        ]);

        $this->command->info("Auto-generated: Table '{$tableName}', Model '{$modelName}'");
    }

    protected function mapToExisting(): void
    {
        $this->command->info('Mapping to existing model/table...');
        // This would be implemented with model/table discovery
        $this->command->info('Feature coming soon - please use manual entry for now');
    }

    protected function editColumns(): void
    {
        $this->command->info('Column mapping editor...');
        // This would open the column mapping interface
        $this->command->info('Feature coming soon');
    }

    protected function browseSampleData(): void
    {
        $this->command->info('Browsing sample data from source table...');
        
        try {
            // Sample data browsing would be implemented here
            $this->command->info('No sample data available');
            
        } catch (\Exception $e) {
            $this->command->error("Could not load sample data: {$e->getMessage()}");
        }
        
        $this->command->info('Press any key to continue...');
    }

    protected function runValidation(): void
    {
        $this->command->info('=== Running Full Validation ===');
        $issues = $this->validateMapping($this->map);
        $this->displayValidationResults($issues);
        
        if (!empty($issues)) {
            $errors = collect($issues)->where('type', 'error');
            
            if ($errors->isNotEmpty() && confirm('Auto-fix common issues?', true)) {
                $this->autoFixIssues($issues);
            }
        }
        
        $this->command->info('Press any key to continue...');
    }

    protected function editRelationships(): void
    {
        $this->command->info('Relationship configuration...');
        $this->command->info('Feature coming soon');
    }

    protected function editTransformations(): void
    {
        $this->command->info('Transformation configuration...');
        $this->command->info('Feature coming soon');
    }

    protected function validateAndConfirm(): void
    {
        $issues = $this->validateMapping($this->map);
        
        if (!empty($issues)) {
            $this->command->getOutput()->writeln('<fg=yellow>⚠️  Changes created validation issues:</>');
            $this->displayValidationResults($issues);
        }
    }

    protected function autoFixIssues(array $issues): void
    {
        $fixed = 0;
        
        foreach ($issues as $issue) {
            if ($issue['category'] === 'destination' && $issue['type'] === 'warning') {
                // Auto-fix table naming
                if (isset($issue['suggestion'])) {
                    $this->map->update(['destination_table' => $issue['suggestion']]);
                    $fixed++;
                    $this->command->info("✅ Fixed: {$issue['message']}");
                }
            }
        }
        
        if ($fixed > 0) {
            $this->command->info("Auto-fixed {$fixed} issues. Re-run validation to see results.");
        } else {
            $this->command->info('No auto-fixable issues found.');
        }
    }
}
